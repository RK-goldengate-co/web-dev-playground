import discord
from discord.ext import commands
import asyncio
import logging
from config import config

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ReactionRoleBot(commands.Bot):
    def __init__(self):
        intents = discord.Intents.default()
        intents.message_content = True
        intents.reactions = True
        intents.guilds = True

        super().__init__(
            command_prefix=config.bot_prefix,
            intents=intents,
            description='Bot Reaction Role cho Discord Server'
        )

        self.role_message_id = int(config.reaction_message_id) if config.reaction_message_id else None
        self.role_channel_id = int(config.reaction_channel_id) if config.reaction_channel_id else None

    async def on_ready(self):
        logger.info(f'Bot {self.user} ƒë√£ k·∫øt n·ªëi th√†nh c√¥ng!')
        logger.info(f'ƒêang ho·∫°t ƒë·ªông tr√™n {len(self.guilds)} server(s)')

        # Ki·ªÉm tra c·∫•u h√¨nh
        try:
            config.validate()
            logger.info('C·∫•u h√¨nh bot h·ª£p l·ªá')
        except ValueError as e:
            logger.error(f'L·ªói c·∫•u h√¨nh: {e}')
            return

        # T·ª± ƒë·ªông th√™m reactions n·∫øu c√≥ message ID
        if self.role_message_id and self.role_channel_id:
            await self.setup_reaction_roles()

    async def setup_reaction_roles(self):
        """Thi·∫øt l·∫≠p reaction roles cho message ƒë√£ c√≥"""
        try:
            channel = self.get_channel(self.role_channel_id)
            if not channel:
                logger.error(f'Kh√¥ng t√¨m th·∫•y channel v·ªõi ID: {self.role_channel_id}')
                return

            message = await channel.fetch_message(self.role_message_id)
            logger.info(f'ƒê√£ t√¨m th·∫•y message reaction roles: {message.id}')

            # Th√™m reactions theo c·∫•u h√¨nh
            for emoji in config.role_mappings.keys():
                try:
                    await message.add_reaction(emoji)
                    logger.info(f'ƒê√£ th√™m reaction {emoji} v√†o message')
                except discord.HTTPException as e:
                    logger.error(f'L·ªói khi th√™m reaction {emoji}: {e}')

        except discord.NotFound:
            logger.error(f'Kh√¥ng t√¨m th·∫•y message v·ªõi ID: {self.role_message_id}')
        except discord.Forbidden:
            logger.error('Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p channel ho·∫∑c message')
        except Exception as e:
            logger.error(f'L·ªói khi thi·∫øt l·∫≠p reaction roles: {e}')

    async def on_raw_reaction_add(self, payload):
        """X·ª≠ l√Ω khi user th√™m reaction"""
        if payload.user_id == self.user.id:
            return  # B·ªè qua reaction c·ªßa bot

        if not payload.guild_id:
            return  # Ch·ªâ x·ª≠ l√Ω trong server

        if (self.role_message_id and payload.message_id != self.role_message_id):
            return  # Ch·ªâ x·ª≠ l√Ω message ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh

        guild = self.get_guild(payload.guild_id)
        if not guild:
            return

        user = guild.get_member(payload.user_id)
        if not user:
            return

        emoji = str(payload.emoji)
        role_id = config.role_mappings.get(emoji)

        if role_id:
            role = guild.get_role(int(role_id))
            if role:
                try:
                    await user.add_roles(role)
                    logger.info(f'ƒê√£ th√™m role {role.name} cho user {user.display_name}')
                except discord.Forbidden:
                    logger.error('Kh√¥ng c√≥ quy·ªÅn ƒë·ªÉ th√™m role cho user')
                except Exception as e:
                    logger.error(f'L·ªói khi th√™m role: {e}')
            else:
                logger.error(f'Kh√¥ng t√¨m th·∫•y role v·ªõi ID: {role_id}')

    async def on_raw_reaction_remove(self, payload):
        """X·ª≠ l√Ω khi user b·ªè reaction"""
        if payload.user_id == self.user.id:
            return  # B·ªè qua reaction c·ªßa bot

        if not payload.guild_id:
            return  # Ch·ªâ x·ª≠ l√Ω trong server

        if (self.role_message_id and payload.message_id != self.role_message_id):
            return  # Ch·ªâ x·ª≠ l√Ω message ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh

        guild = self.get_guild(payload.guild_id)
        if not guild:
            return

        user = guild.get_member(payload.user_id)
        if not user:
            return

        emoji = str(payload.emoji)
        role_id = config.role_mappings.get(emoji)

        if role_id:
            role = guild.get_role(int(role_id))
            if role:
                try:
                    await user.remove_roles(role)
                    logger.info(f'ƒê√£ b·ªè role {role.name} t·ª´ user {user.display_name}')
                except discord.Forbidden:
                    logger.error('Kh√¥ng c√≥ quy·ªÅn ƒë·ªÉ b·ªè role c·ªßa user')
                except Exception as e:
                    logger.error(f'L·ªói khi b·ªè role: {e}')
            else:
                logger.error(f'Kh√¥ng t√¨m th·∫•y role v·ªõi ID: {role_id}')

    @commands.command(name='setup_reaction_roles')
    @commands.has_permissions(administrator=True)
    async def setup_reaction_roles_cmd(self, ctx, message_id: int = None):
        """Thi·∫øt l·∫≠p reaction roles cho m·ªôt message"""
        if message_id:
            self.role_message_id = message_id

        if not self.role_message_id:
            await ctx.send('‚ùå Vui l√≤ng cung c·∫•p message ID ho·∫∑c thi·∫øt l·∫≠p trong config')
            return

        await self.setup_reaction_roles()
        await ctx.send(f'‚úÖ ƒê√£ thi·∫øt l·∫≠p reaction roles cho message ID: {self.role_message_id}')

    @commands.command(name='list_roles')
    async def list_roles(self, ctx):
        """Hi·ªÉn th·ªã danh s√°ch role mappings hi·ªán t·∫°i"""
        if not config.role_mappings:
            await ctx.send('‚ùå Kh√¥ng c√≥ role mappings n√†o ƒë∆∞·ª£c c·∫•u h√¨nh')
            return

        embed = discord.Embed(
            title='üìã Reaction Role Mappings',
            description='C√°c emoji v√† role t∆∞∆°ng ·ª©ng:',
            color=0x00ff00
        )

        for emoji, role_id in config.role_mappings.items():
            role = ctx.guild.get_role(int(role_id))
            role_name = role.name if role else f'Role ID: {role_id} (Kh√¥ng t√¨m th·∫•y)'
            embed.add_field(
                name=f'{emoji}',
                value=f'{role_name}',
                inline=True
            )

        await ctx.send(embed=embed)

    @commands.command(name='info')
    async def bot_info(self, ctx):
        """Hi·ªÉn th·ªã th√¥ng tin v·ªÅ bot"""
        embed = discord.Embed(
            title='ü§ñ Th√¥ng tin Reaction Role Bot',
            description='Bot gi√∫p qu·∫£n l√Ω reaction roles trong Discord server',
            color=0x0099ff
        )

        embed.add_field(
            name='üë®‚Äçüíª Developer',
            value='Web Dev Playground Team',
            inline=True
        )

        embed.add_field(
            name='üìö Version',
            value='1.0.0',
            inline=True
        )

        embed.add_field(
            name='üîó Source',
            value='[GitHub Repository](https://github.com/your-repo)',
            inline=False
        )

        await ctx.send(embed=embed)

async def main():
    """Kh·ªüi ch·∫°y bot"""
    bot = ReactionRoleBot()

    try:
        await bot.start(config.discord_token)
    except discord.LoginFailure:
        logger.error('‚ùå Token kh√¥ng h·ª£p l·ªá! Vui l√≤ng ki·ªÉm tra l·∫°i token trong file .env')
    except Exception as e:
        logger.error(f'‚ùå L·ªói khi kh·ªüi ch·∫°y bot: {e}')
    finally:
        await bot.close()

if __name__ == '__main__':
    asyncio.run(main())
