# User Management System - Docker Compose
# Multi-service orchestration với PostgreSQL, Redis, và monitoring

version: '3.8'

# ========================================
# NETWORKS
# ========================================
networks:
  user-management-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ========================================
# VOLUMES
# ========================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ========================================
# SERVICES
# ========================================

# PostgreSQL Database
services:
  postgres:
    image: postgres:15-alpine
    container_name: user-management-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: user_management
      POSTGRES_USER: user_mgmt_app
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./database/seed.sql:/docker-entrypoint-initdb.d/02-seed.sql:ro
    ports:
      - "5432:5432"
    networks:
      - user-management-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user_mgmt_app -d user_management"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command:
      - "postgres"
      - "-c"
      - "max_connections=200"
      - "-c"
      - "shared_buffers=256MB"
      - "-c"
      - "effective_cache_size=1GB"
      - "-c"
      - "maintenance_work_mem=64MB"
      - "-c"
      - "checkpoint_completion_target=0.9"
      - "-c"
      - "wal_buffers=16MB"
      - "-c"
      - "default_statistics_target=100"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "effective_io_concurrency=200"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: user-management-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme456}
    volumes:
      - redis_data:/data
      - ./redis.conf:/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      - user-management-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch (cho search và analytics)
  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: user-management-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - user-management-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Main Application API
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: user-management-api
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=${DB_CONNECTION_STRING}
      - Redis__ConnectionString=${REDIS_CONNECTION_STRING}
      - Elasticsearch__Url=http://elasticsearch:9200
      - JWT__Secret=${JWT_SECRET}
      - JWT__Issuer=user-management-api
      - JWT__Audience=user-management-api
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - user-management-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: user-management-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d/:/etc/nginx/conf.d/:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - api
    networks:
      - user-management-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB (cho analytics và logging)
  mongodb:
    image: mongo:7-jammy
    container_name: user-management-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-changeme789}
      MONGO_INITDB_DATABASE: user_management_analytics
    volumes:
      - ./mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    ports:
      - "27017:27017"
    networks:
      - user-management-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: user-management-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - user-management-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: user-management-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - user-management-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: user-management-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-changeme101}
    volumes:
      - ./rabbitmq/init.sh:/docker-entrypoint-initdb.d/init.sh:ro
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - user-management-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Worker Service (cho background tasks)
  worker:
    build:
      context: .
      dockerfile: Dockerfile.Worker
    container_name: user-management-worker
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__DefaultConnection=${DB_CONNECTION_STRING}
      - Redis__ConnectionString=${REDIS_CONNECTION_STRING}
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Username=admin
      - RabbitMQ__Password=${RABBITMQ_PASSWORD:-changeme101}
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - user-management-network
    deploy:
      replicas: 2

  # Migration Service (cho database migrations)
  migration:
    build:
      context: .
      dockerfile: Dockerfile.Migration
    container_name: user-management-migration
    restart: "no"
    environment:
      - ConnectionStrings__DefaultConnection=${DB_CONNECTION_STRING}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - user-management-network
    command: ["dotnet", "ef", "database", "update"]

  # ========================================
  # DEVELOPMENT OVERRIDE
  # ========================================

  # Uncomment for development với hot reload
  # api-dev:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.Development
  #   container_name: user-management-api-dev
  #   environment:
  #     - ASPNETCORE_ENVIRONMENT=Development
  #   volumes:
  #     - .:/app
  #     - /app/bin
  #     - /app/obj
  #   ports:
  #     - "8081:8080"
  #   networks:
  #     - user-management-network

# ========================================
# SECRETS MANAGEMENT
# ========================================
secrets:
  db_password:
    external: true
  redis_password:
    external: true
  jwt_secret:
    external: true
  mongo_password:
    external: true
  rabbitmq_password:
    external: true
  grafana_password:
    external: true
